#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size, n = 10; // Default n value can be changed
    int local_sum = 0, total_sum = 0;
    int numbers[n];
    MPI_Status status;

    // Initialize MPI environment
    MPI_Init(&argc, &argv);

    // Get the rank of the process
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Get the total number of processes
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Root process initializes the array of integers
    if (rank == 0) {
        printf("Input integers (n = %d):\n", n);
        for (int i = 0; i < n; i++) {
            numbers[i] = i + 1; // Example: integers from 1 to n
            printf("%d ", numbers[i]);
        }
        printf("\n");
    }

    // Distribute numbers to processes
    int chunk_size = n / size;
    int local_numbers[chunk_size];
    MPI_Scatter(numbers, chunk_size, MPI_INT, local_numbers, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process calculates the sum of its chunk
    for (int i = 0; i < chunk_size; i++) {
        local_sum += local_numbers[i];
    }

    // Ring communication to compute total sum
    int send_value = local_sum;
    for (int step = 0; step < size; step++) {
        if (rank == step) {
            MPI_Send(&send_value, 1, MPI_INT, (rank + 1) % size, 0, MPI_COMM_WORLD);
        } else if (rank == (step + 1) % size) {
            MPI_Recv(&send_value, 1, MPI_INT, step, 0, MPI_COMM_WORLD, &status);
            send_value += local_sum;
        }
    }

    // Root process prints the final sum
    if (rank == 0) {
        total_sum = send_value;
        printf("The sum of the integers is: %d\n", total_sum);
    }

    // Finalize MPI environment
    MPI_Finalize();

    return 0;
}
