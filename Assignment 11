#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    int rank, size, N = 10000, local_start, local_end;
    long local_sum = 0, total_sum = 0;

    // Initialize MPI environment
    MPI_Init(&argc, &argv);

    // Get the rank of the process
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Get the total number of processes
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Determine the range of numbers for each process
    int chunk_size = N / size;
    local_start = rank * chunk_size + 1;
    local_end = (rank == size - 1) ? N : local_start + chunk_size - 1;

    // Compute the local sum for this process
    for (int i = local_start; i <= local_end; i++) {
        local_sum += i;
    }

    // Reduce all local sums to compute the total sum at the root process
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_LONG, MPI_SUM, 0, MPI_COMM_WORLD);

    // Root process prints the result
    if (rank == 0) {
        printf("The sum of the first %d integers is: %ld\n", N, total_sum);
    }

    // Finalize the MPI environment
    MPI_Finalize();

    return 0;
}
