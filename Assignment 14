#include <cuda_runtime.h>
#include <stdio.h>

#define N 16  // Matrix dimensions (N x N)

// CUDA kernel for matrix multiplication
__global__ void matrixMultiplyKernel(float* A, float* B, float* C, int n) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < n && col < n) {
        float sum = 0.0f;
        for (int k = 0; k < n; k++) {
            sum += A[row * n + k] * B[k * n + col];
        }
        C[row * n + col] = sum;
    }
}

// Function to initialize a matrix with sequential values
void initializeMatrix(float* matrix, int size, float startValue) {
    for (int i = 0; i < size; i++) {
        matrix[i] = startValue + (float)i;
    }
}

// Function to print a matrix
void printMatrix(float* matrix, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%.1f ", matrix[i * cols + j]);
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    const int size = N * N;
    const int bytes = size * sizeof(float);

    // Host matrices
    float *h_A1, *h_B1, *h_C1, *h_A2, *h_B2, *h_C2;
    h_A1 = (float*)malloc(bytes);
    h_B1 = (float*)malloc(bytes);
    h_C1 = (float*)malloc(bytes);
    h_A2 = (float*)malloc(bytes);
    h_B2 = (float*)malloc(bytes);
    h_C2 = (float*)malloc(bytes);

    // Initialize matrices
    initializeMatrix(h_A1, size, 1.0f);  // First matrix A1
    initializeMatrix(h_B1, size, 2.0f);  // First matrix B1
    initializeMatrix(h_A2, size, 3.0f);  // Second matrix A2
    initializeMatrix(h_B2, size, 4.0f);  // Second matrix B2

    // Print input matrices
    printf("Matrix A1:\n");
    printMatrix(h_A1, N, N);
    printf("Matrix B1:\n");
    printMatrix(h_B1, N, N);
    printf("Matrix A2:\n");
    printMatrix(h_A2, N, N);
    printf("Matrix B2:\n");
    printMatrix(h_B2, N, N);

    // Device matrices
    float *d_A1, *d_B1, *d_C1, *d_A2, *d_B2, *d_C2;
    cudaMalloc((void**)&d_A1, bytes);
    cudaMalloc((void**)&d_B1, bytes);
    cudaMalloc((void**)&d_C1, bytes);
    cudaMalloc((void**)&d_A2, bytes);
    cudaMalloc((void**)&d_B2, bytes);
    cudaMalloc((void**)&d_C2, bytes);

    // Copy matrices to device
    cudaMemcpy(d_A1, h_A1, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B1, h_B1, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_A2, h_A2, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B2, h_B2, bytes, cudaMemcpyHostToDevice);

    // Kernel configuration
    dim3 threadsPerBlock(16, 16);  // 16x16 threads per block
    dim3 blocksPerGrid((N + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                       (N + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch kernels for matrix multiplications
    matrixMultiplyKernel<<<blocksPerGrid, threadsPerBlock>>>(d_A1, d_B1, d_C1, N);
    matrixMultiplyKernel<<<blocksPerGrid, threadsPerBlock>>>(d_A2, d_B2, d_C2, N);

    // Copy results back to host
    cudaMemcpy(h_C1, d_C1, bytes, cudaMemcpyDeviceToHost);
    cudaMemcpy(h_C2, d_C2, bytes, cudaMemcpyDeviceToHost);

    // Print results
    printf("Result of A1 x B1:\n");
    printMatrix(h_C1, N, N);
    printf("Result of A2 x B2:\n");
    printMatrix(h_C2, N, N);

    // Free memory
    free(h_A1); free(h_B1); free(h_C1);
    free(h_A2); free(h_B2); free(h_C2);
    cudaFree(d_A1); cudaFree(d_B1); cudaFree(d_C1);
    cudaFree(d_A2); cudaFree(d_B2); cudaFree(d_C2);

    return 0;
}
